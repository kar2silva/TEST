# Instructions:
# https://app.platerecognizer.com/stream-docs

# List of TZ names on https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
timezone = UTC

[cameras]
  # Full list of regions: http://docs.platerecognizer.com/#countries
  # regions = us, mx

  # Sample 1 out of X frames. A high number will result in less compute.
  # A low number is preferred for a stream with fast moving vehicles
  # sample = 15

  # Maximum delay in seconds before a prediction is returned
  # max_prediction_delay = 6

  # Maximum time in seconds that a result stays in memory
  # memory_decay = 300

  # Enable make, model and color prediction. Your account must have that option.
  # mmc = true

  # Image file name, you can use any format codes from https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes
  image_format = $(camera)_screenshots/%y-%m-%d/%H-%M-%S.%f.jpg

  # Webhook image type. Use "vehicle" to send only the vehicle image or "original" to
  # send the full-size image. This setting can be used at the camera level too.
  webhook_image_type = vehicle

  # When a webhook is sent, the request will time out after n seconds and retry later.
  # webhook_request_timeout = 30

  # Only accept the results that exactly match the templates of the specified regions.
  # region_config = strict

  # Only accept license plates when a vehicle is also detected.
  # detection_rule = normal

  # Beta - Detect vehicles without a license plate. One of: plate, vehicle
  # detection_mode = plate

  # Advanced - Number of steps used to merge unique vehicles. A low number will increase compute.
  # If set to -1, it is automatically picked (default).
  # merge_buffer = -1

  [[camera-1]]
    active = yes
    url = rtsp://root:warsaw@192.168.4.87/axis-media/media.amp?videocodec=h264

    # Output methods. Uncomment/comment line to enable/disable.
    # - Save to CSV file. The corresponding frame is stored as an image in the same directory.
    csv_file = $(camera)_%y-%m-%d.csv

    # - Send to Webhook. The recognition data and vehicle image are encoded in
    # multipart/form-data and sent to webhook_target.
    # webhook_targets = https://webhook.site/2e7fbb2c-e123-45ac-aea9-27af0e443e42
    # webhook_image = yes
    # webhook_caching = yes

    # - Send to ParkPow. See https://app.parkpow.com/accounts/token/
    # - Save to file in JSONLines format. https://jsonlines.org/
    # jsonlines_file = $(camera)_%y-%m-%d.jsonl
